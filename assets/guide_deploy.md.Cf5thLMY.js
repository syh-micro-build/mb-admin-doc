import{_ as s,c as a,o as i,a2 as n}from"./chunks/framework.D2XzT7iW.js";const u=JSON.parse('{"title":"构建&部署","description":"","frontmatter":{},"headers":[],"relativePath":"guide/deploy.md","filePath":"guide/deploy.md"}'),e={name:"guide/deploy.md"},t=n(`<h1 id="构建-部署" tabindex="-1">构建&amp;部署 <a class="header-anchor" href="#构建-部署" aria-label="Permalink to &quot;构建&amp;部署&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">前言</p><p>由于是展示项目，所以打包后相对较大，如果项目中没有用到的插件，可以删除对应的文件或者路由，不引用即可，没有引用就不会打包。</p></div><h2 id="构建" tabindex="-1">构建 <a class="header-anchor" href="#构建" aria-label="Permalink to &quot;构建&quot;">​</a></h2><p>项目开发完成之后，执行以下命令进行构建</p><ul><li>开发环境 npm run build dev ===&gt; dist-dev</li><li>测试环境 npm run build test ===&gt; dist-test</li><li>生产环境 npm run build pro ===&gt; dist-pro</li></ul><p>构建打包成功之后，会在根目录生成 dist-* 文件夹，里面就是构建打包好的文件。</p><h3 id="预览" tabindex="-1">预览 <a class="header-anchor" href="#预览" aria-label="Permalink to &quot;预览&quot;">​</a></h3><p>发布之前可以在本地进行预览</p><p><strong>不能直接打开构建后的 html 文件</strong></p><p>使用项目自定的命令进行预览(推荐)</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 先打包在进行预览</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 预览开发环境</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> preview</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 预览测试环境</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> preview</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 预览生产环境</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> preview</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pro</span></span></code></pre></div><h2 id="部署" tabindex="-1">部署 <a class="header-anchor" href="#部署" aria-label="Permalink to &quot;部署&quot;">​</a></h2><div class="danger custom-block"><p class="custom-block-title">注意</p><p>项目默认是在生产环境开启 Mock，这样做非常不好，只是为了演示环境有数据，不建议在生产环境使用 Mock，而应该使用真实的后台接口。</p></div><h3 id="发布" tabindex="-1">发布 <a class="header-anchor" href="#发布" aria-label="Permalink to &quot;发布&quot;">​</a></h3><p>简单的部署只需要将最终生成的静态文件，dist-* 文件夹的静态文件发布到你的 cdn 或者静态服务器即可。</p><p><strong>部署时可能会发现资源路径不对，只需要修改对应的<code>.env.xxx</code>文件即可。</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 根据自己路径来配置更改</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VITE_BASE_PATH</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dist-dev/</span></span></code></pre></div>`,17),l=[t];function p(h,d,r,o,k,c){return i(),a("div",null,l)}const F=s(e,[["render",p]]);export{u as __pageData,F as default};
